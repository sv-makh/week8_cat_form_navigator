import 'package:flutter/material.dart';
import 'package:cat_owners_form_app/resulting_route.dart';

enum GenderList { male, female }

void main() => runApp(MaterialApp(
      home: Scaffold(
        appBar: AppBar(
            title: const Text("üêà –û–ø—Ä–æ—Å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–æ—à–µ–∫"),
            centerTitle: true),
        body: MyForm(),
      ),
    ));

class MyForm extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => MyFormState();
}

class MyFormState extends State {
  final _formKey = GlobalKey<FormState>();

  GenderList _catGender = GenderList.female;

  //–≤–∏–¥—ã –∫–æ—Ä–º–∞
  bool _feedDry = false;
  bool _feedWet = false;
  bool _feedNatural = false;

  @override
  Widget build(BuildContext context) {
    return Container(
        padding: const EdgeInsets.all(10.0),
        child: Form(
            key: _formKey,
            child: SingleChildScrollView(//–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
              child: Column(children: [
              const Text("–í–∞—à –ø–∏—Ç–æ–º–µ—Ü",
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 20)),
              Row(children: [
                const SizedBox(
                    width: 80,
                    child: Text(
                      "–ö–ª–∏—á–∫–∞",
                      style: TextStyle(fontSize: 15.0),
                    )),
                Expanded(child: TextFormField(validator: (value) {
                  if (value!.isEmpty) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∏—á–∫—É –ø–∏—Ç–æ–º—Ü–∞';
                }))
              ]),
              Row(children: [
                const SizedBox(
                    width: 80,
                    child: Text(
                      "–ü–æ—Ä–æ–¥–∞",
                      style: TextStyle(fontSize: 15.0),
                    )),
                Expanded(child: TextFormField(validator: (value) {
                  if (value!.isEmpty) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –ø–∏—Ç–æ–º—Ü–∞';
                }))
              ]),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  SizedBox(
                      width: 150,
                      child: RadioListTile(
                          title: const Text("—Å–∞–º–∫–∞"),
                          value: GenderList.female,
                          groupValue: _catGender,
                          onChanged: (GenderList? value) =>
                              setState(() => _catGender = value!))),
                  SizedBox(
                      width: 150,
                      child: RadioListTile(
                          title: const Text("—Å–∞–º–µ—Ü"),
                          value: GenderList.male,
                          groupValue: _catGender,
                          onChanged: (GenderList? value) =>
                              setState(() => _catGender = value!))),
                ],
              ),
              Row(children: [
                const SizedBox(
                    width: 50,
                    child: Text(
                      "–ö–æ—Ä–º",
                      style: TextStyle(fontSize: 15.0),
                    )),
                Column(
                  children: [
                    SizedBox(
                        width: 300,
                        child: CheckboxListTile(
                          value: _feedDry,
                          title: const Text("—Å—É—Ö–æ–π"),
                          onChanged: (bool? value) =>
                              setState(() => _feedDry = value!),
                          controlAffinity: ListTileControlAffinity.leading,
                        )),
                    SizedBox(
                        width: 300,
                        child: CheckboxListTile(
                          value: _feedWet,
                          title: const Text("–≤–ª–∞–∂–Ω—ã–π"),
                          onChanged: (bool? value) =>
                              setState(() => _feedWet = value!),
                          controlAffinity: ListTileControlAffinity.leading,
                        )),
                    SizedBox(
                        width: 300,
                        child: CheckboxListTile(
                          value: _feedNatural,
                          title: const Text("–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π"),
                          onChanged: (bool? value) =>
                              setState(() => _feedNatural = value!),
                          controlAffinity: ListTileControlAffinity.leading,
                        )),
                  ],
                )
              ]),
              const Text("–í—ã",
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 20)),
              Row(children: [
                const SizedBox(
                    width: 80,
                    child: Text(
                      "–ò–º—è",
                      style: TextStyle(fontSize: 15.0),
                    )),
                Expanded(child: TextFormField(validator: (value) {
                  if (value!.isEmpty) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
                }))
              ]),
              Row(children: [
                const SizedBox(
                    width: 80,
                    child: Text(
                      "–¢–µ–ª–µ—Ñ–æ–Ω",
                      style: TextStyle(fontSize: 15.0),
                    )),
                Expanded(
                    child: TextFormField(
                        validator: (value) {
                          if (value!.isEmpty) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω';
                          if (value.contains(RegExp(r'[a-zA-Z]'))) return '–≠—Ç–æ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
                        },
                        keyboardType: TextInputType.phone))
              ]),
              Row(children: [
                const SizedBox(
                    width: 80,
                    child: Text(
                      "E-mail",
                      style: TextStyle(fontSize: 15.0),
                    )),
                Expanded(child: TextFormField(validator: (value) {
                  if (value!.isEmpty) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail';
                  if (!value.contains('@')) return '–≠—Ç–æ –Ω–µ E-mail';
                }))
              ]),
              ElevatedButton(
                child: const Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
                onPressed: () {
                  String message = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã";
                  Color messageColor = Colors.green;

                  if (!_formKey.currentState!.validate() ||
                  !_feedDry && !_feedWet && !_feedNatural) {
                    message = "–î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã";
                    messageColor = Colors.red;

                    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                      content: Text(message),
                      duration: const Duration(seconds: 3),
                      backgroundColor: messageColor,
                      action: SnackBarAction(
                        label: "Ok",
                        textColor: Colors.black,
                        onPressed: () {},
                      ),
                    ));
                  }
                  else {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => ResultingRoute()),
                    );
                  }
                },
              )
            ]))));
  }
}
